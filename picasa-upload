#!/bin/bash
#=======================================================================================================================
# Description
#   Script for automated upload of photos to picasa
# Requires
#   ImageMagick
#   googlecl (http://code.google.com/p/googlecl/)
# Synopsis
#   picasa-upload [options] picture_dir album_name
#     options     - any combination of B, D, R, U, W, b, d, s
#     picture_dir - directory with photos. Mandatory
#     album_name  - name of the destination Picasa album
#=======================================================================================================================

. "$(dirname "$(realpath "$0")")/common.sh"

# Setup vars
pic_size=1600                                                      # Max size of the pictures to upload
file_watermark_white="$HOME/Pictures/Misc/dk-watermark-white.png"  # Default watermark file
file_watermark_black="$HOME/Pictures/Misc/dk-watermark-black.png"  # Black watermark file
file_watermark_small="$HOME/Pictures/Misc/dk-watermark-small.png"  # 'Small' watermark file
picasa_owner="dmitry.kann"                                         # Owner of the Picasa account
USAGE_INFO="Usage: $0 [options] photos_dir album_name
Options:
  -B  Do not add a black border to the image
  -D  Do not delete the processed photos after uploading (leave them in the source dir)
  -R  Do not resize photos to $pic_size pixels
  -U  Do not upload the photos to Picasa (implies -D)
  -W  Do not watermark images
  -b  Use black watermark instead of the default white one
  -d  Delete original (after successful processing)
  -s  Use "small" watermark instead of the default one (better for small images)

album_name is mandatory unless -U is specified."

#-----------------------------------------------------------------------------------------------------------------------
# Functions
#-----------------------------------------------------------------------------------------------------------------------

# Prints out a status message (overwritten every time)
# Arguments:
#   $1 message text
status() {
    # Pad/truncate the line to fit screen width
    printf "%-${tty_width}.${tty_width}s\r" "$1"
}

# Prints out a progress message
# Arguments:
#   $1 current item number
#   $2 total number of items
#   $3 message text
progress() {
    printf -v msg '[%d/%d] %s' "$1" "$2" "$3"
    status "$msg"
}

# Fetches image details using its metadata. Return success/error code
# Arguments:
#   $1 image file name
fetch_image_details() {
    # Fetch image size
    img_size=$(identify -quiet -format "%w %h" "$1" | awk '{print ($1>$2 ? $1 : $2)}') || warn "Determining image size in $1 failed."
    # Fetch image caption (dataset 2, property 105, see http://www.imagemagick.org/script/escape.php for details)
    img_caption=$(identify -quiet -format "%[IPTC:2:105]" "$1") || warn "Determining image caption in $1 failed."
}

#=======================================================================================================================
# Main routine
#=======================================================================================================================

#-----------------------------------------------------------------------------------------------------------------------
# Parse and check the command line
#-----------------------------------------------------------------------------------------------------------------------

# Parse command line options
b_delete_processed=1
b_delete_original=0
b_resize=1
b_watermark=1
b_upload=1
s_watermark_to_use="$file_watermark_white"
s_border_options="-bordercolor black -border 2"

args=$(getopt -o BDRUWbds -- "$@")
[ $? -ne 0 ] && usage
eval set -- $args
for i; do
    case "$i" in
        -B)
            unset s_border_options
            shift
            ;;
        -D)
            b_delete_processed=0
            shift
            ;;
        -R)
            b_resize=0
            shift
            ;;
        -U)
            b_delete_processed=0
            b_upload=0
            shift
            ;;
        -W)
            b_watermark=0
            shift
            ;;
        -b)
            s_watermark_to_use="$file_watermark_black"
            shift
            ;;
        -d)
            b_delete_original=1
            shift
            ;;
        -s)
            s_watermark_to_use="$file_watermark_small"
            shift
            ;;
        --)
            shift;
            break
            ;;
    esac
done

# Parse the rest of the command line
dir_photos="$1"
picasa_album_name="$2"

# Check photos_dir
[[ -n "$dir_photos" ]] || usage "Directory for photos is not specified"
[[ -d "$dir_photos" ]] || err "Directory '$dir_photos' does not exist."

# Check album_name
[[ $b_upload -eq 0 ]] || [[ -n "$picasa_album_name" ]] || usage "Album name is not specified"

#-----------------------------------------------------------------------------------------------------------------------
# Initialization
#-----------------------------------------------------------------------------------------------------------------------

# Create a temp output dir if needed
unset temp_dir
[[ $b_delete_processed -eq 0 ]] || temp_dir=$(mktemp -d)

# Get TTY width
tty_width=$(stty size | cut -d ' ' -f 2)

#-----------------------------------------------------------------------------------------------------------------------
# Read the file list
#-----------------------------------------------------------------------------------------------------------------------

# Temporarily change the field separator to make find results work with filenames containing spaces
OLDIFS=$IFS
IFS=$'\n'

# Get the files
files=( $(find "$dir_photos" -type f \( -iname '*.jpg' -o -iname '*.png' \) ! -name '*.picasaweb.*' -print | sort) )

# Restore the field separator
IFS=$OLDIFS

i_count=${#files[@]}

#-----------------------------------------------------------------------------------------------------------------------
# Process the picture files
#-----------------------------------------------------------------------------------------------------------------------

# Iterate through the file list
i_cur_num=0
i_err_count=0
for (( i_cur_num=1; i_cur_num<=${i_count}; i_cur_num++ )); do
    src_file=${files[$((i_cur_num-1))]}
    b_error=0

    # Determine output dir
    if [[ -n "$temp_dir" ]]; then
        output_dir="$temp_dir"
    else
        output_dir=$(dirname "$src_file")
    fi

    # Determine full output file name
    src_file_name=$(basename "$src_file")
    dst_file="$output_dir/${src_file_name%\.*}.picasaweb.$(echo ${src_file##*.} | tr '[:upper:]' '[:lower:]')"

    # Print out status message
    progress $i_cur_num $i_count "Processing $src_file"

    # Try to fetch image details
    fetch_image_details "$src_file"

    # Determine the need for resize. We resize unless it's turned off, and only if picture size is unknown or bigger than
    # the standard size
    unset s_resize_flags
    [[ $b_resize -ne 0 ]] && ( [[ -z "$img_size" ]] || [[ $img_size -gt $pic_size ]] ) && s_resize_flags="-resize $pic_size"

    # Resize and autorotate the image, add a border if needed
    if ! convert $s_resize_flags -quiet -quality 90 -auto-orient $s_border_options "$src_file" "$dst_file"; then
        b_error=1
        warn "Conversion of $src_file failed."
        # Apply watermark
    elif ! ( [[ $b_watermark -eq 0 ]] || composite -blend 90% -gravity southeast "$s_watermark_to_use" "$dst_file" "$dst_file" ); then
        b_error=1
        warn "Watermarking $src_file failed."
        # Upload the picture
    elif [ $b_upload -ne 0 ]; then
        progress $i_cur_num $i_count "Uploading $dst_file";
        if ! google picasa post "$picasa_album_name" "$dst_file" --owner "$picasa_owner" --summary "$img_caption" --quiet; then
            b_error=1
            warn "Uploading $dst_file failed."
        fi
    fi
    # If processing failed, add the picture to the failure list
    if [[ $b_error -ne 0 ]]; then
        failed_pics[$i_err_count]="$src_file"
        ((i_err_count++))
    fi
    # If successfully processed, delete the original if needed
    [[ $b_error -eq 0 ]] && [ $b_delete_original -ne 0 ] && ( rm -f "$src_file" || warn "Couldn't delete $src_file" )
    # Remove the failed/handled picture if needed
    ( [[ $b_error -eq 0 ]] && [[ $b_delete_processed -eq 0 ]] ) || [[ ! -f "$dst_file" ]] || rm -f "$dst_file"
done

#-----------------------------------------------------------------------------------------------------------------------
# Finalization
#-----------------------------------------------------------------------------------------------------------------------

status "Done. $i_count files processed."
echo

# Remove temp dir if needed
[[ -z "$temp_dir" ]] || rmdir --ignore-fail-on-non-empty "$temp_dir"

# Print out failure list if there's any
if [[ $i_err_count -gt 0 ]]; then
    warn "Processing of the following $i_err_count picture(s) failed:"
    for f in ${failed_pics[@]}; do echo "$f" >&2; done
    exit 1
fi

exit 0
